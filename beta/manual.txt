# List pictures
curl -X GET http://localhost:5000/pictures

# List downloads
curl -X GET http://localhost:5000/downloads


# Upload a picture with book_id
curl -X POST -F "file=@/path/to/your/image.jpg" http://localhost:5000/pictures?book_id=123

# Upload a document with book_id
curl -X POST -F "file=@/path/to/your/document.pdf" http://localhost:5000/downloads?book_id=123


# Update a picture
curl -X PUT -F "file=@/path/to/your/new_image.jpg" http://localhost:5000/pictures?book_id=123

# Update a document
curl -X PUT -F "file=@/path/to/your/new_document.pdf" http://localhost:5000/downloads?book_id=123


# Delete a picture
curl -X DELETE "http://localhost:5000/pictures?filename=123.jpg"

# Delete a document
curl -X DELETE "http://localhost:5000/downloads?filename=123.pdf"


# Get a picture
curl -O http://localhost:5000/db/pictures/123.jpg

# Get a document
curl -O http://localhost:5000/db/downloads/123.pdf


For Backup:

Standard Streaming Backup (Default):
CopyGET /backup

Asynchronous Backup (Better for Slow Connections):
CopyGET /backup?stream=false

Returns an operation ID
Check status with GET /operation/{operation_id}
Download when ready with GET /operation/{operation_id}?download=true



For Restore:

Standard Upload (Small Files):
CopyPOST /restore
Content-Type: multipart/form-data
[file: backup.zip]

Chunked Upload (Large Files/Slow Connections):
Copy# Initialize chunked upload
POST /restore?chunk=true
Headers: X-Total-Chunks: 10

# Upload each chunk
POST /restore?chunk=true&operation_id={id}&chunk_number=0
Content-Type: multipart/form-data
[file: chunk_data]
